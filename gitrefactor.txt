diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index 38c825a..f12bd1d 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -72,17 +72,9 @@ public class Board {
     
     public void loadLayoutConfig() throws BadConfigFormatException, FileNotFoundException {
     	String[] line;
-        ArrayList<String> raws = new ArrayList<String>();
-
-        // open file for reading
-        FileReader fileReader = new FileReader(layoutConfigFile);
-        Scanner scan = new Scanner(fileReader);
-        
-        // loop over lines and add to array
-        while (scan.hasNextLine()) {
-        	raws.add(scan.nextLine());
-        }
-        scan.close();
+    	
+    	// extract data from file
+		ArrayList<String> raws = extractLayoutFile();
         
         // determine dimensions
         ROWS = raws.size();
@@ -90,8 +82,12 @@ public class Board {
         COLS = line.length;
 
         // create grid from dimensions
-        // extract data and save by cell
-    	grid = new BoardCell[ROWS][COLS];
+    	createGrid(raws);
+		makeAdjList();
+	}
+	public void createGrid(ArrayList<String> raws) {
+		String[] line;
+		grid = new BoardCell[ROWS][COLS];
 		for (int i =0; i < ROWS; i++) {
 			line = raws.get(i).split(",");
 			for (int j=0; j < COLS; j++) {
@@ -102,33 +98,55 @@ public class Board {
         		char second = ' ';
         		newCell.setInitial(first);
         		
-        		
         		if (cell.length() == 2) {
         			second = line[j].charAt(1); // extract 2nd char
         		}
-        		if (second == '*' ) {
-        			newCell.setIsCenter(true);
-        			Character c = first;
-        			Room room = roomMap.get(c);
-        			room.setCenterCell(newCell);
-        		}
-        		if (second == '#') {
-        			newCell.setIsLabel(true);
-        			Character c = first;
-        			Room room = roomMap.get(c);
-        			room.setLabelCell(newCell);
-        		}
-        		if (second == '^' || second == 'v' || second == '>' || second == '<') {
-        			newCell.setIsDoor(true);
-        			newCell.setDoorDirection(second);
-        		}
-        		if (second < 91 && second > 64) {
-        			newCell.setSecretPassage(second);
-        		}
+        		editSpecialCells(newCell, first, second);
         		
 				grid[i][j] = newCell; // insert cell into grid
 			}
 		}
+	}
+    
+	public void editSpecialCells(BoardCell newCell, char first, char second) {
+		if (second == '*' ) {
+			newCell.setIsCenter(true);
+			Character c = first;
+			Room room = roomMap.get(c);
+			room.setCenterCell(newCell);
+		}
+		if (second == '#') {
+			newCell.setIsLabel(true);
+			Character c = first;
+			Room room = roomMap.get(c);
+			room.setLabelCell(newCell);
+		}
+		if (second == '^' || second == 'v' || second == '>' || second == '<') {
+			newCell.setIsDoor(true);
+			newCell.setDoorDirection(second);
+		}
+		if (second < 91 && second > 64) {
+			newCell.setSecretPassage(second);
+		}
+	}
+    
+	public ArrayList<String> extractLayoutFile() throws FileNotFoundException {
+		String[] line;
+        ArrayList<String> raws = new ArrayList<String>();
+
+        // open file for reading
+        FileReader fileReader = new FileReader(layoutConfigFile);
+        Scanner scan = new Scanner(fileReader);
+        
+        // loop over lines and add to array
+        while (scan.hasNextLine()) {
+        	raws.add(scan.nextLine());
+        }
+        scan.close();
+		return raws;
+	}
+	
+	public void makeAdjList() {
 		//creates the adjacent cell list for all the cells in the grid
 		for (int i = 0; i < ROWS; i++) {
 			for (int j = 0; j < COLS; j++) {
